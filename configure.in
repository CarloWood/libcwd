dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision$)dnl

dnl General intialization of `autoconf' varaibles.
dnl Ensure that the directory specified with --srcdir was correct
dnl by demanding that it contains `debugmalloc.cc'.
AC_INIT(debugmalloc.cc)

dnl Include maintainer mode targets
AM_MAINTAINER_MODE

dnl Put resulting configuration defines in this header file.
AM_CONFIG_HEADER(config.h)

dnl Demand at least version 2.13 of autoconf.
AC_PREREQ(2.13)

dnl Version info
dnl
dnl INTERFACE_VERSION		: Current interface version, increment whenever the interface is changed.
dnl INTERFACE_VERSION_REVISION	: Revision, increment every public release; or set to 0 when the interface is changed.
dnl INTERFACE_AGE		: Increment if interfaces have been added; or set to 0 when interfaces have been removed.

INTERFACE_VERSION=99		dnl 0.99 actually
INTERFACE_VERSION_REVISION=8
INTERFACE_AGE=99		dnl 0.99 actually

VERSION_MAJOR=`expr $INTERFACE_VERSION - $INTERFACE_AGE`
VERSION_MINOR=$INTERFACE_AGE
VERSION_REVISION=$INTERFACE_VERSION_REVISION

dnl Automake package name and version
AM_INIT_AUTOMAKE(libcwd, [$VERSION_MAJOR.$VERSION_MINOR.$VERSION_REVISION])

dnl Libtool version info
VERSIONINFO="$INTERFACE_VERSION:$INTERFACE_VERSION_REVISION:$INTERFACE_AGE"
AC_SUBST(VERSIONINFO)

dnl Set WARNOPTS, DEBUGOPTS and EXTRAOPTS to suitable start values.
CW_DO_OPTIONS

dnl Set a decent default value in case we don't have the right libraries
case "$host" in
  *sparc*) CW_CONFIG_BUILTIN_RETURN_ADDRESS_OFFSET="0" ;;
  *) CW_CONFIG_BUILTIN_RETURN_ADDRESS_OFFSET="-1" ;;
esac
AC_SUBST(CW_CONFIG_BUILTIN_RETURN_ADDRESS_OFFSET)

dnl Manual configuration options of libcwd.
AC_ARG_ENABLE(libcwd,
[Options of package libcwd:])

libcwd_config_alloc=yes
AC_ARG_ENABLE(libcwd-alloc,
    [  --disable-libcwd-alloc  disable memory allocation debugging support.],
    libcwd_config_alloc=$enableval)

libcwd_config_magic=yes
AC_ARG_ENABLE(libcwd-magic,
    [  --disable-libcwd-magic  disable magic numbers in memory allocation debugging.],
    libcwd_config_magic=$enableval)

libcwd_config_marker=yes
AC_ARG_ENABLE(libcwd-marker,
    [  --disable-libcwd-marker disable memory allocation markers.],
    libcwd_config_marker=$enableval)

libcwd_config_bfd=yes
AC_ARG_ENABLE(libcwd-bfd,
    [  --disable-libcwd-bfd    do not try to find and use the bfd library,
                          this will disable sourcefile:linenumber support.],
    libcwd_config_bfd=$enableval)

libcwd_config_debug=no
AC_ARG_ENABLE(libcwd-debug,
    [  --enable-libcwd-debug   enable debugging of libcwd itself.],
    libcwd_config_debug=$enableval)

libcwd_config_debugm=no
AC_ARG_ENABLE(libcwd-debugm,
    [  --enable-libcwd-debugm  enable debugging of memory allocation debugging code
                          in libcwd itself.],
    libcwd_config_debugm=$enableval)

dnl Restore the environment variables used when running `configure' when
dnl `config.status --recheck' was invoked.
dnl Always let CXX and CXXCPP override cached values
CW_ENVIRONMENT

dnl Check for compiler and preprocessor
CW_PROG_CXX
CW_PROG_CXXCPP

dnl Clear the cache values of all remaining tests if important
dnl environment variables have been changed since last run.
CW_CLEAN_CACHE

dnl Add -pipe to EXTRAOPTS if possible
CW_PIPE_EXTRAOPTS

dnl Checks for other programs.
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_AWK
AC_PATH_PROG(PS, ps, /bin/ps, $PATH)
CW_SYS_PS_WIDE_PID_OPTION
AC_DEFINE_UNQUOTED(CW_PATH_PROG_PS, "$PS")

dnl We need to use these options for the tests too
CXXFLAGS="$DEBUGOPTS $EXTRAOPTS"

dnl This block cannot be replaced by a macro because the DISABLE_* and
dnl PROG_LIBTOOL macros need to be in configure.in itself for some reason.
dnl This block is also present in src/libcw/configure.in!
dnl Generate libtool (also checks shared/static prerequisites)
if expr "$host" : ".*openbsd.*" >/dev/null; then
  dnl openBSD has a buggy ld, no way that a shared library will work.
  AM_DISABLE_SHARED
else
  dnl Disable building static libraries by default
  AM_DISABLE_STATIC
fi
test -n "$enable_shared" || enable_shared=yes
test -n "$enable_static" || enable_static=yes
dnl Note: due to a bug in libtool-1.3c, the language must be C at this point!
AM_PROG_LIBTOOL
dnl Configuration needed by the testsuite, extract this from the generated 'libtool'
enable_shared=`grep '^build_libtool_libs=' libtool | sed -e 's/build_libtool_libs=//'`
enable_static=`grep '^build_old_libs=' libtool | sed -e 's/build_old_libs=//'`
AC_SUBST(enable_shared)
AC_SUBST(enable_static)
if test $enable_shared = yes; then
  if expr "$host" : ".*openbsd.*" >/dev/null; then
    AC_MSG_ERROR([

The dynamic linker (ld) on openBSD is too buggy for C++ shared libraries.
Static libraries are supported however, please configure using
--enable-static --disable-shared, which is the default for openBSD.
])
  fi
fi

dnl Configuration defines of debug_config.h
AC_SUBST(CW_CONFIG_DEBUGMALLOC)
CW_CONFIG_DEBUGMALLOC=undef
AC_SUBST(CW_CONFIG_DEBUGMAGICMALLOC)
CW_CONFIG_DEBUGMAGICMALLOC=undef
AC_SUBST(CW_CONFIG_DEBUGUSEBFD)
CW_CONFIG_DEBUGUSEBFD=undef
AC_SUBST(CW_CONFIG_DEBUGDEBUG)
CW_CONFIG_DEBUGDEBUG=undef
AC_SUBST(CW_CONFIG_DEBUGDEBUGMALLOC)
CW_CONFIG_DEBUGDEBUGMALLOC=undef
AC_SUBST(CW_CONFIG_DEBUGMARKER)
CW_CONFIG_DEBUGMARKER=undef

dnl Configuration needed by the testsuite
AC_SUBST(enable_shared)
AC_SUBST(enable_static)

if test "$libcwd_config_alloc" = yes; then
  CW_CONFIG_DEBUGMALLOC=define
fi

if test "$libcwd_config_magic" = yes; then
  CW_CONFIG_DEBUGMAGICMALLOC=define
fi

dnl Set language requirements for the tests below.
AC_LANG_CPLUSPLUS
AC_REQUIRE_CPP

if test "$libcwd_config_bfd" = yes; then

  dnl Check if we have dlopen in libc or libdl
  AC_CHECK_LIB(c, dlopen, [AC_DEFINE_UNQUOTED(HAVE_DLOPEN)],
      [AC_CHECK_LIB(dl, dlopen, [LIBS="-ldl $LIBS"; AC_DEFINE_UNQUOTED(HAVE_DLOPEN)])])

  dnl Check if we have `xmalloc' in libiberty
  AC_CHECK_LIB(iberty, xmalloc,,
    [dnl If that failed, then look if perhaps it is in /usr/local/lib in case we didn't look there.
    AC_CACHE_CHECK([if there is a working libiberty in /usr/local], cw_cv_lib_iberty_xmalloc_usrlocal,
    [if test -f /usr/local/lib/libiberty.a -o -e /usr/local/lib/libiberty.so; then
       save_CPPFLAGS="$CPPFLAGS"
       save_LDFLAGS="$LDFLAGS"
       save_LIBS="$LIBS"
       CPPFLAGS="$CPPFLAGS -I/usr/local/include"
       LDFLAGS="$LDFLAGS -L/usr/local/lib"
       LIBS="-liberty $LIBS"
       AC_TRY_LINK([extern "C" void* xmalloc();], [(void)xmalloc()], cw_cv_lib_iberty_xmalloc_usrlocal=yes, cw_cv_lib_iberty_xmalloc_usrlocal=no)
       LIBS="$save_LIBS"
       LDFLAGS="$save_LDFLAGS"
       CPPFLAGS="$save_CPPFLAGS"
     fi
    ])
    if test "$cw_cv_lib_iberty_xmalloc_usrlocal" = "yes"; then
      CPPFLAGS="$CPPFLAGS -I/usr/local/include"
      LDFLAGS="$LDFLAGS -L/usr/local/lib"
      LIBS="-liberty $LIBS"
    fi])

  dnl If it failed, then abort with an error message.
  if test "$ac_cv_lib_iberty_xmalloc" = "no" -a "set+$cw_cv_lib_iberty_xmalloc_usrlocal" = "set+no"; then
    AC_MSG_ERROR([

* Cannot find a working libiberty.  Perhaps you need to add -L/path
* to LDFLAGS (read the INSTALL file for more info)?
* Libiberty is part of binutils (or binutils-devel or binutils-dev).
* You can skip this check by using configure --disable-libcwd-bfd, but
* then lookup of function names and source:line information will be disabled.
])
  fi

  dnl Check if we have libbfd.
  dnl We look for `bfd_set_start_address' because that function might use dcgettext__
  dnl which is part of -lintl (it does on FreeBSD).
  AC_CHECK_LIB(bfd, bfd_set_start_address,,
    [dnl If that failed, try linking with -lintl:
    AC_CACHE_CHECK([for bfd_set_start_address in -lbfd -lintl], cw_cv_lib_bfd_bfd_set_start_address_with_intl,
    [save_LIBS="$LIBS"
     LIBS="-lbfd -lintl $LIBS"
     AC_TRY_LINK([extern "C" char bfd_set_start_address();], [bfd_set_start_address()], cw_cv_lib_bfd_bfd_set_start_address_with_intl=yes, cw_cv_lib_bfd_bfd_set_start_address_with_intl=no)
     LIBS="$save_LIBS"
    ])
    if test "$cw_cv_lib_bfd_bfd_set_start_address_with_intl" = "yes"; then
      LIBS="-lbfd -lintl $LIBS"
    fi])

  dnl If we succeeded so far, then enable DEBUGUSEBFD
  if test "$ac_cv_lib_bfd_bfd_set_start_address" != "no" -o "set+$cw_cv_lib_bfd_bfd_set_start_address_with_intl" = "set+yes"; then
    AC_CHECK_HEADER(bfd.h,
      [CW_CONFIG_DEBUGUSEBFD=define],
      [AC_MSG_ERROR([

* You have libbfd, but I cannot find bfd.h.  Perhaps you need to add -I/path
* to CPPFLAGS (read the INSTALL file for more info)?  If your OS uses
* packages then you need to make sure you have installed both, binutils
* and the development version of binutils (binutils-devel, or binutils-dev).
* You can skip this check by using configure --disable-libcwd-bfd, but
* then lookup of function names and source:line information will be disabled.
])])
  else
    AC_MSG_ERROR([

* Cannot find a working libbfd.  Perhaps you need to add -L/path to LDFLAGS
* (read the INSTALL file for more info)?  Libbfd is part of binutils.
* You can skip this check by using configure --disable-libcwd-bfd, but
* then lookup of function names and source:line information will be disabled.
])
  fi

  dnl This test needs the full set of libraries we just determined.
  CW_SYS_BUILTIN_RETURN_ADDRESS_OFFSET

fi

if test "$libcwd_config_debug" = yes; then
  CW_CONFIG_DEBUGDEBUG=define
fi

if test "$libcwd_config_debugm" = yes; then
  CW_CONFIG_DEBUGDEBUGMALLOC=define
fi

if test "$libcwd_config_marker" = yes; then
  CW_CONFIG_DEBUGMARKER=define
fi

dnl Checks for header files.
AC_HEADER_STAT
AC_CHECK_HEADERS(_G_config.h)

dnl Check for typedefs.
AC_TYPE_SIGNAL
CW_DEFINE_TYPE(retsig_t, [$ac_cv_type_signal])
CW_TYPE_SOCKLEN_T
CW_TYPE_OPTVAL_T
CW_TYPE_SIGHANDLER_PARAM_T
if test "$ac_cv_type_signal" = "int"; then
  AC_DEFINE_UNQUOTED([CW_RETSIGTYPE_IS_INT])
fi
AC_TYPE_UID_T
CW_TYPE_GETGROUPS
if test "$ac_cv_type_getgroups" = "gid_t"; then
  CW_CONFIG_NEED_SYS_TYPES=define
else
  CW_CONFIG_NEED_SYS_TYPES=undef
fi
AC_SUBST(CW_CONFIG_NEED_SYS_TYPES)

dnl Check for structures.

dnl Check for compiler/system characteristics.
CW_BUG_REDEFINES([sys/resource.h])
CW_MALLOC_OVERHEAD
CW_NEED_WORD_ALIGNMENT
CW_NBLOCK
CW_BUG_G_CONFIG_H
CW_SYS_RECURSIVE_BUILTIN_RETURN_ADDRESS
CW_SYS_FRAME_ADDRESS_OFFSET

dnl Check for library functions.
AC_CHECK_FUNCS(getgid getegid getgroups)

dnl Check for system services.

dnl Set up build directory
test ! -d include && mkdir include

dnl Set up rpm directory when in maintainer mode
CW_SETUP_RPM_DIRS

dnl Generate include/libcw/debug_config.h and include/libcw/sys.h, preserving timestamp when they are not changed.
AC_OUTPUT_COMMANDS([
cd include/libcw
if echo "$CONFIG_FILES" | grep debug_config.ho > /dev/null; then
  if cmp -s debug_config.h debug_config.ho 2> /dev/null; then
    echo "debug_config.h is unchanged"
  else
    echo "creating debug_config.h"
    cp debug_config.ho debug_config.h
  fi
fi
if echo "$CONFIG_FILES" | grep sys.ho >/dev/null; then
  if cmp -s sys.h sys.ho 2> /dev/null; then
    echo "sys.h is unchanged"
  else
    echo "creating sys.h"
    cp sys.ho sys.h
  fi
fi
cd ../..
])

CW_OUTPUT(Makefile maintMakefile include/Makefile include/libcw/Makefile utils/Makefile tests/Makefile testsuite/Makefile include/libcw/debug_config.ho include/libcw/sys.ho)
exit 0

dnl Keep automake happy
AC_OUTPUT(Makefile maintMakefile include/Makefile include/libcw/Makefile utils/Makefile tests/Makefile testsuite/Makefile include/libcw/debug_config.ho include/libcw/sys.ho)
