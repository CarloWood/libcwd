load_lib "libgloss.exp"

#
# Run the test specified by srcfile and resultfile. compile_args and
# exec_args are additional arguments to be passed in when compiling and
# running the testcase, respectively.
#
proc test_libcwd { options srcfile compile_args inpfile resultfile exec_args } {
    global base_dir
    global LIBS OPTIONS
    global includes
    global srcdir subdir objdir
    global ld_library_path

verbose "Calling test_libcwd:"
verbose "    options = \"$options\""
verbose "    srcfile = \"$srcfile\""
verbose "    compile_args = \"$compile_args\""
verbose "    inpfile = \"$inpfile\""
verbose "    resultfile = \"$resultfile\""
verbose "    exec_args = \"$exec_args\""
verbose "    LIBS = \"$LIBS\""
verbose "    OPTIONS = \"$OPTIONS\""

    set args ""

    if { $compile_args != "" } {
	lappend args "additional_flags=$compile_args"
    }

    lappend args "libs=$LIBS"
    lappend args "additional_flags=$OPTIONS"
    lappend args "c++"

    regsub "^.*/(\[^/.\]+)\[.\]\[^/]*$" "$srcfile" "\\1" out
    set executable "${objdir}/$out"
    set errname "[file tail $srcfile]"
    if { $compile_args != "" } {
	set errname "$errname $compile_args"
    }

    if { [target_compile $srcfile "$executable" executable $args] != "" } {
	fail "$errname compilation"
	setup_xfail "*-*-*"
	fail "$errname execution"
	setup_xfail "*-*-*"
	fail "$errname output"
	return;
    }
    pass "$errname compilation"

    set result [libcwd_load $executable "$exec_args" "$inpfile"];
    set status [lindex $result 0];
    set output [lindex $result 1];
    $status "$errname execution"
    if { $status != "pass" } {
	setup_xfail "*-*-*"
	fail "$errname output"
	return;
    }

    verbose "resultfile is $resultfile"
    set id [open $resultfile r];
    set expected ""
    append expected [read $id];
    regsub -all "\r" "$output" "" output;
    regsub "\n*$" $expected "" expected
    regsub "\n*$" $output "" output
    regsub "^\n*" $expected "" expected
    regsub "^\n*" $output "" output
    regsub -all "\[ \t\]\[ \t\]*" $expected " " expected
    regsub -all "\[ \t\]*\n\n*" $expected "\n" expected
    regsub -all "\[ \t\]\[ \t\]*" $output " " output
    regsub -all "\[ \t\]*\n\n*" $output "\n" output
    verbose "expected is $expected"
    verbose "actual is $output"
    set passed 0;
    if {$options == "regexp_match"} {
	if [regexp $expected $output] {
	    set passed 1;
	}
    } else {
	if { $expected == $output } {
	    set passed 1;
	}
    }
    if { $passed == 1 } {
	pass "$errname output"
    } else {
	clone_output "expected was $expected"
	clone_output "output was $output"
	fail "$errname output"
    }
    close $id;
}
