# Copyright (C) 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

load_lib "libgloss.exp"

global tmpdir

if ![info exists tmpdir] {
    set tmpdir "/tmp"
}

#
# Build the status wrapper library as needed.
#
proc libcwd_init { args } {
  verbose "Calling libcwd with args = \"$args\"" 2
}

#
# Run the test specified by srcfile and resultfile. compile_args and
# exec_args are additional arguments to be passed in when compiling and
# running the testcase, respectively.
#
proc test_libcwd { options srcfile compile_args inpfile resultfile exec_args } {
    global base_dir
    global libcwd
    global includes
    global srcdir subdir objdir
    global ld_library_path

verbose "Calling test_libcwd:"
verbose "    options = \"$options\""
verbose "    srcfile = \"$srcfile\""
verbose "    compile_args = \"$compile_args\""
verbose "    inpfile = \"$inpfile\""
verbose "    resultfile = \"$resultfile\""
verbose "    exec_args = \"$exec_args\""

verbose "    libcwd = \"$libcwd\""

    # dejagnu changes the order of -lbfd and libiberty.a, therefore we must replace the latter with -liberty
    regsub "\[^ \]*/libiberty\.a" "$libcwd" "-liberty" tmp
    set libcwd "$tmp"

verbose "    libcwd = \"$libcwd\""

    set args ""

    if { $compile_args != "" } {
	lappend args "additional_flags=$compile_args"
    }

    lappend args "libs=$libcwd";
    lappend args "c++"

    regsub "^.*/(\[^/.\]+)\[.\]\[^/]*$" "$srcfile" "\\1" out
    set executable "${objdir}/$out"
    set errname "[file tail $srcfile]"
    if { $compile_args != "" } {
	set errname "$errname $compile_args"
    }

    if { [target_compile $srcfile "$executable" executable $args] != "" } {
	fail "$errname compilation"
	setup_xfail "*-*-*"
	fail "$errname execution"
	setup_xfail "*-*-*"
	fail "$errname output"
	return;
    }
    pass "$errname compilation"

    set result [libcwd_load $executable "$exec_args" "$inpfile"];
    set status [lindex $result 0];
    set output [lindex $result 1];
    $status "$errname execution"
    if { $status != "pass" } {
	setup_xfail "*-*-*"
	fail "$errname output"
	return;
    }

    verbose "resultfile is $resultfile"
    set id [open $resultfile r];
    set expected ""
    append expected [read $id];
    regsub -all "\r" "$output" "" output;
    regsub "\n*$" $expected "" expected
    regsub "\n*$" $output "" output
    regsub "^\n*" $expected "" expected
    regsub "^\n*" $output "" output
    regsub -all "\[ \t\]\[ \t\]*" $expected " " expected
    regsub -all "\[ \t\]*\n\n*" $expected "\n" expected
    regsub -all "\[ \t\]\[ \t\]*" $output " " output
    regsub -all "\[ \t\]*\n\n*" $output "\n" output
    verbose "expected is $expected"
    verbose "actual is $output"
    set passed 0;
    if {$options == "regexp_match"} {
	if [regexp $expected $output] {
	    set passed 1;
	}
    } else {
	if { $expected == $output } {
	    set passed 1;
	}
    }
    if { $passed == 1 } {
	pass "$errname output"
    } else {
	clone_output "expected was $expected"
	clone_output "output was $output"
	fail "$errname output"
    }
    close $id;
}

#
# libcwd_version -- extract and print the version number of libcwd
#
proc default_libcwd_version {} {
}

proc default_libcwd_start { } {
}
