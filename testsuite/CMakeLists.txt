# Define the test types.
set(NODEBUGCHECK "nodebug")
set(TSTCHECK "alloctag" "basic" "location" "cf" "continued" "dc" "demangler" "dlopen" "do" "filter" "find_alloc" "flush" "leak" "lockable_auto_ptr" "magic" "marker" "strdup" "test_delete" "type_info")
set(THREADSCHECK "keys" "threads")

# Get the basename of the current directory.
get_filename_component(SUBDIR ${CMAKE_CURRENT_SOURCE_DIR} NAME)

# Define the distdir variable.
set(DISTDIR "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}/${SUBDIR}")

# Define the distfiles variable.
set(DISTFILES "Makefile.in" "module.cc" "config" "lib" "libcwd.tst" "libcwd.nodebug" "libcwd.threads")

# Define shared nodebug targets.
set(SHAREDNODEBUGTARGETS "")
foreach(test ${NODEBUGCHECK})
  list(APPEND SHAREDNODEBUGTARGETS "nodebug_${test}_shared")
endforeach()

# Define shared test targets.
set(SHAREDTSTTARGETS "")
foreach(test ${TSTCHECK})
  list(APPEND SHAREDTSTTARGETS "tst_${test}_shared")
endforeach()

# Define shared threads targets.
set(SHAREDTHREADSTARGETS "")
foreach(test ${THREADSCHECK})
  list(APPEND SHAREDTHREADSTARGETS "threads_${test}_shared")
endforeach()

# Define variables corresponding to what was used in Makefile.in.
set(SHAREDTARGETS ${SHAREDTSTTARGETS} ${SHAREDNODEBUGTARGETS} ${SHAREDTHREADSTARGETS})
set(EXPECT_SCRIPTS "nodebug.exp" "tst.exp" "threads.exp" CACHE STRING "Default expect scripts for runtest")
set(MODULETARGETS "module_r.so")

# Define variables for running tests.
find_program(RUNTEST runtest)
# Check if runtest was found
if (RUNTEST STREQUAL "RUNTEST-NOTFOUND")
  message(WARNING "runtest not found")
endif ()
set(RUNTESTFLAGS "-a" CACHE STRING "Default flags for runtest")

# Define the path to the site.exp file.
set(SITE_EXP_PATH "site.exp")
set(SITE_BAK_PATH "site.bak")

# Create a custom command to generate site.exp.
add_custom_command(
  OUTPUT ${SITE_EXP_PATH}
  DEPENDS ${CMAKE_BINARY_DIR}/include/libcwd/config.h
  BYPRODUCTS ${SITE_BAK_PATH}
  COMMENT "Making a new config file..."
  VERBATIM
  COMMAND test -f ${SITE_EXP_PATH} || touch ${SITE_EXP_PATH}
  COMMAND cp ${SITE_EXP_PATH} ${SITE_BAK_PATH}
  COMMAND echo "## these variables are automatically generated by make ##" > ${SITE_EXP_PATH}
  COMMAND echo "# Do not edit here. If you wish to override these values" >> ${SITE_EXP_PATH}
  COMMAND echo "# add them to the last section" >> ${SITE_EXP_PATH}
  COMMAND echo "set tool libcwd" >> ${SITE_EXP_PATH}
  COMMAND echo "set srcdir ${CMAKE_CURRENT_SOURCE_DIR}" >> ${SITE_EXP_PATH}
  COMMAND echo "set STATIC no" >> ${SITE_EXP_PATH}
  COMMAND echo "set SHARED yes" >> ${SITE_EXP_PATH}
  COMMAND echo "## All variables above are generated by configure. Do Not Edit ##" >> ${SITE_EXP_PATH}
  COMMAND test -f ${SITE_BAK_PATH} && sed -e "1,/^## All variables above are.*##/ d" ${SITE_BAK_PATH} >> ${SITE_EXP_PATH} || true
)

# Create a custom target for 'check' that depends on 'site.exp' and other module targets.
add_custom_target(check
  DEPENDS ${SITE_EXP_PATH} module_r
  COMMENT "Running tests..."
  COMMAND ${CMAKE_COMMAND} -E env LD_LIBRARY_PATH="${CMAKE_CURRENT_BINARY_DIR}:${LD_LIBRARY_PATH}"
          ${RUNTEST} ${RUNTESTFLAGS} ${EXPECT_SCRIPTS}
)

# Convert to space-separated string.
string(REPLACE ";" " " SHAREDTARGETS_STR "${SHAREDTARGETS}")

add_custom_target(run
  DEPENDS ${SHAREDTARGETS} module_r
  COMMENT "Executing tests..."
  COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/run_tests.sh ${CMAKE_CURRENT_BINARY_DIR} "${SHAREDTARGETS_STR}"
)

# Create a shared library from module.cc.
add_library(module_r SHARED EXCLUDE_FROM_ALL module.cc)

# Define the macro LIBCWD_THREAD_SAFE.
target_compile_definitions(module_r PRIVATE LIBCWD_THREAD_SAFE)

# Add an include directory for module_r.
target_include_directories(module_r PRIVATE libcwd.tst ${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/include ${CMAKE_SOURCE_DIR}/include)

# Make sure we're compiled with CWDEBUG.
target_link_libraries(module_r PRIVATE cwd_r)

# Include debug info in the shared library.
target_compile_options(module_r PRIVATE -g)

# Link the threading library.
find_package(Threads REQUIRED)
target_link_libraries(module_r PUBLIC Threads::Threads)

set(CMAKE_BUILD_TYPE None)
set(CMAKE_CXX_FLAGS "")

foreach(NODEBUG_NAME ${NODEBUGCHECK})
  add_executable(nodebug_${NODEBUG_NAME}_shared EXCLUDE_FROM_ALL libcwd.nodebug/${NODEBUG_NAME}.cc)
  target_include_directories(nodebug_${NODEBUG_NAME}_shared
    PRIVATE
      ${CMAKE_CURRENT_SOURCE_DIR}/libcwd.tst
      ${CMAKE_BINARY_DIR}
      ${CMAKE_BINARY_DIR}/include
      ${CMAKE_SOURCE_DIR}/include
  )
  target_link_libraries(nodebug_${NODEBUG_NAME}_shared PRIVATE cwd_r)
endforeach()

foreach(TST_NAME ${TSTCHECK})
  add_executable(tst_${TST_NAME}_shared EXCLUDE_FROM_ALL libcwd.tst/${TST_NAME}.cc)
  target_include_directories(tst_${TST_NAME}_shared PRIVATE ${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/include ${CMAKE_SOURCE_DIR}/include)
  target_link_libraries(tst_${TST_NAME}_shared PRIVATE cwd_r)
  target_compile_options(tst_${TST_NAME}_shared PRIVATE -g)
endforeach()

foreach(THREADS_NAME ${THREADSCHECK})
  add_executable(threads_${THREADS_NAME}_shared EXCLUDE_FROM_ALL libcwd.threads/${THREADS_NAME}.cc)
  target_include_directories(threads_${THREADS_NAME}_shared
    PRIVATE
      ${CMAKE_CURRENT_SOURCE_DIR}/libcwd.tst
      ${CMAKE_BINARY_DIR}
      ${CMAKE_BINARY_DIR}/include
      ${CMAKE_SOURCE_DIR}/include
  )
  target_link_libraries(threads_${THREADS_NAME}_shared PRIVATE cwd_r)
  target_compile_options(threads_${THREADS_NAME}_shared PRIVATE -g)
endforeach()

target_include_directories(tst_location_shared PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
