NODEBUGCHECK = nodebug
TSTCHECK = alloctag basic location cf continued dc demangler dlopen do filter find_alloc flush leak lockable_auto_ptr magic marker strdup test_delete type_info
THREADSCHECK = keys threads

srcdir = @srcdir@
top_builddir = ..
distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
subdir = testsuite
VPATH = @srcdir@
SHELL = @SHELL@

CXX = @CXX@
EXTRAOPTS = @EXTRAOPTS@
DEBUGOPTS = @DEBUGOPTS@
WARNOPTS = @WARNOPTS@
TESTOPTS = @TESTOPTS@
DEFS = -DHAVE_CONFIG_H -DCWDEBUG
CXXFLAGS = $(DEBUGOPTS) $(EXTRAOPTS) $(WARNOPTS) $(TESTOPTS)
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
RPATH_OPTION = @RPATH_OPTION@
RPATH := $(shell cd $(top_builddir)/.libs; pwd)
SHAREDLIBS = -L$(top_builddir)/.libs -lcwd @LIBS@ $(RPATH_OPTION)$(RPATH)
STATICLIBS = $(top_builddir)/.libs/libcwd.a @LIBS@
THREADS_SHAREDLIBS = -L$(top_builddir)/.libs -lcwd_r @LIBS@ @LIB_THREADS@ $(RPATH_OPTION)$(RPATH)
THREADS_STATICLIBS = $(top_builddir)/.libs/libcwd_r.a @LIBS@ @LIB_THREADS@
enable_shared = @enable_shared@
enable_static = @enable_static@
enable_threads = @libcwd_config_threading@
INCLUDES = -Ilibcwd.tst -I$(top_builddir)/include -I$(srcdir)/../include
PACKAGE = @PACKAGE@
VERSION = @VERSION@
DISTFILES = Makefile.in module.cc config lib libcwd.tst libcwd.nodebug libcwd.threads

ifeq ($(enable_shared), yes)
SHAREDTSTTARGETS := $(patsubst %,tst_%_shared,$(TSTCHECK))
SHAREDNODEBUGTARGETS := $(patsubst %,nodebug_%_shared,$(NODEBUGCHECK))
SHAREDTHREADSTARGETS := $(patsubst %,threads_%_shared,$(THREADSCHECK))
else
SHAREDTSTTARGETS :=
SHAREDNODEBUGTARGETS :=
SHAREDTHREADSTARGETS :=
endif

ifeq ($(enable_static), yes)
STATICTSTTARGETS := $(patsubst %,tst_%_static,$(TSTCHECK))
STATICNODEBUGTARGETS := $(patsubst %,nodebug_%_static,$(NODEBUGCHECK))
STATICTHREADSTARGETS := $(patsubst %,threads_%_static,$(THREADSCHECK))
else
STATICTSTTARGETS :=
STATICNODEBUGTARGETS :=
STATICTHREADSTARGETS :=
endif
ifeq ($(enable_threads), yes)
SHAREDTARGETS := $(SHAREDTSTTARGETS) $(SHAREDNODEBUGTARGETS) $(SHAREDTHREADSTARGETS)
EXPECT_SCRIPTS = nodebug.exp threads.exp tst.exp
MODULETARGETS = module.so module_r.so
else
SHAREDTARGETS := $(SHAREDTSTTARGETS) $(SHAREDNODEBUGTARGETS)
EXPECT_SCRIPTS = nodebug.exp tst.exp
MODULETARGETS = module.so
endif

CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)
CXXLINK = $(CXX) $(CXXFLAGS) $(LDFLAGS)

RUNTEST = runtest
RUNTESTFLAGS = -a
FLAGS_TO_PASS =

all:
info install-info clean-info dvi install etags tags installcheck:

site.exp: Makefile
	@echo "Making a new config file..."
	-@rm -f ./tmp?
	@touch site.exp
	-@mv site.exp site.bak
	@echo "## these variables are automatically generated by make ##" > ./tmp0
	@echo "# Do not edit here. If you wish to override these values" >> ./tmp0
	@echo "# add them to the last section" >> ./tmp0
	@echo "set compiler \"$(CXX)\"" >> ./tmp0
	@echo "set tool libcwd" >> ./tmp0
	@echo "set srcdir $(srcdir)" >> ./tmp0
	@test "$(enable_shared)" != "yes" || echo "set SHAREDLIBS \"$(SHAREDLIBS)\"" >> ./tmp0
	@test "$(enable_shared)" != "yes" || echo "set THREADS_SHAREDLIBS \"$(THREADS_SHAREDLIBS)\"" >> ./tmp0
	@test "$(enable_shared)" != "no" || echo "set SHAREDLIBS \"\"" >> ./tmp0
	@test "$(enable_shared)" != "no" || echo "set THREADS_SHAREDLIBS \"\"" >> ./tmp0
	@test "$(enable_static)" != "yes" || echo "set STATICLIBS \"$(STATICLIBS)\"" >> ./tmp0
	@test "$(enable_static)" != "yes" || echo "set THREADS_STATICLIBS \"$(THREADS_STATICLIBS)\"" >> ./tmp0
	@test "$(enable_static)" != "no" || echo "set STATICLIBS \"\"" >> ./tmp0
	@test "$(enable_static)" != "no" || echo "set THREADS_STATICLIBS \"\"" >> ./tmp0
	@echo "set OPTIONS \"$(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS) $(LDFLAGS)\"" >> ./tmp0
	@echo "set THREADS_OPTIONS \"$(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS) -pthread $(LDFLAGS)\"" >> ./tmp0
	@echo "## All variables above are generated by configure. Do Not Edit ##" >> ./tmp0
	@cat ./tmp0 > site.exp
	@cat site.bak | sed -e '1,/^## All variables above are.*##/ d' >> site.exp
	-@rm -f ./tmp?

check: site.exp $(MODULETARGETS)
	$(RUNTEST) $(RUNTESTFLAGS) $(FLAGS_TO_PASS) $(EXPECT_SCRIPTS)

module.so: module.cc $(top_builddir)/.libs/libcwd.so.*
	$(CXXCOMPILE) -shared -fpic -DPIC -w $< -o $@

ifeq ($(enable_threads), yes)
module_r.so: module.cc $(top_builddir)/.libs/libcwd_r.so.*
	$(CXXCOMPILE) -D_REENTRANT -pthread -shared -fpic -DPIC -w $< -o $@
endif

# Provide rules for manual compilation:
tst_%.o: libcwd.tst/%.cc Makefile $(top_builddir)/include/libcw/*.h
	$(CXXCOMPILE) -c $< -o $@

nodebug_%.o: libcwd.nodebug/%.cc Makefile $(top_builddir)/include/libcw/*.h
	$(CXXCOMPILE) -c $< -o $@

threads_%.o: libcwd.threads/%.cc Makefile $(top_builddir)/include/libcw/*.h
	$(CXXCOMPILE) -D_REENTRANT -pthread -c $< -o $@

ifeq ($(enable_shared), yes)
threads_threads_shared: threads_threads.o $(top_builddir)/.libs/libcwd_r.so.*
	$(CXXLINK) -pthread $< -o $@ $(THREADS_SHAREDLIBS) -ldl

threads_%_shared: threads_%.o $(top_builddir)/.libs/libcwd_r.so.*
	$(CXXLINK) -pthread $< -o $@ $(THREADS_SHAREDLIBS)

tst_dlopen_shared: tst_dlopen.o $(top_builddir)/.libs/libcwd.so.*
	$(CXXLINK) $< -o $@ $(SHAREDLIBS) -ldl

tst_%_shared: tst_%.o $(top_builddir)/.libs/libcwd.so.*
	$(CXXLINK) $< -o $@ $(SHAREDLIBS)

nodebug_%_shared: nodebug_%.o $(top_builddir)/.libs/libcwd.so.*
	$(CXXLINK) $< -o $@ $(SHAREDLIBS)
endif

ifeq ($(enable_static), yes)
threads_threads_static: threads_threads.o $(top_builddir)/.libs/libcwd_r.a
	$(CXXLINK) -pthread $< -o $@ $(THREADS_STATICLIBS) -ldl

threads_%_static: threads_%.o $(top_builddir)/.libs/libcwd_r.a
	$(CXXLINK) -pthread $< -o $@ $(THREADS_STATICLIBS)

tst_dlopen_static: tst_dlopen.o $(top_builddir)/.libs/libcwd.a
	$(CXXLINK) $< -o $@ $(STATICLIBS) -ldl

tst_%_static: tst_%.o $(top_builddir)/.libs/libcwd.a
	$(CXXLINK) $< -o $@ $(STATICLIBS)

nodebug_%_static: nodebug_%.o $(top_builddir)/.libs/libcwd.a
	$(CXXLINK) $< -o $@ $(STATICLIBS)
endif

shared: $(SHAREDTARGETS)
static: $(STATICTARGETS)

run: shared static $(MODULETARGETS)
	@for i in $(SHAREDTARGETS) $(STATICTARGETS); do \
	  echo -n "$$i: "; if ./$$i 2>/dev/null >/dev/null; then echo "OK"; else echo "ERROR"; fi ; done

# Clean rules
mostlyclean:
	rm -f site.bak core core.* *.core *.o
clean: mostlyclean
	rm -f site.exp *.log *.sum *_*_shared *_*_static module*.so .\#* */.\#*
distclean: clean
	rm -f Makefile

# Uninstall rule
uninstall:

# Maintainer rules
maintainer-clean realclean: distdir-clean distclean

distdir-clean:
	(\
	  cvsdirs="`find $(scrdir) -type d -name CVS`"; \
	  dirs="`for d in $$cvsdirs; do echo $$d | sed -e 's%/CVS$$%%'; done`"; \
	  for d in $$dirs; do \
	    cvsfiles="`grep '^/' $$d/CVS/Entries | cut -d/ -f2`"; \
	    echo "distclean in $$d"; \
	    (cd $$d; \
	       files="`find . -type f -maxdepth 1 | sed -e 's%.*/%%'`"; \
	       rmfiles="`for i in $$files $$cvsfiles Makefile Makefile; do echo $$i; done | sort | uniq -u`"; \
	       test -z "$$rmfiles" || echo "  removing $$rmfiles"; \
	       rm -f $$rmfiles; \
	    ); \
	  done; \
	);

distdir: distdir-clean $(DISTFILES)
	distdir=`cd $(distdir) && pwd`;
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    mkdir -p $(distdir)/$$file; \
	    find $$d/$$file -type f -maxdepth 1 -exec cp -p {} $(distdir)/$$file \;; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	cd $(top_builddir) && CONFIG_FILES=testsuite/Makefile CONFIG_HEADERS= $(SHELL) ./config.status
