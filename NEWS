libcwd-0.99.16

	* libcwd is now thread-safe *
	You have to configure using --enable-libcwd-threading.

	The source file line number lookup was improved for optimized code with
	inlined functions (-O).

	New configuration option --disable-libcwd-debug-output was added to
	allow the use of the testsuite together with --enable-libcwd-debug.
	(You shouldn't use either unless you are hacking libcwd itself).

        New are environment variables that influence libcwd.
	At the moment there are two:
	LIBCWD_NO_STARTUP_MSGS : Don't print anything before main().
	LIBCWD_PRINT_LOADING : Print messages about loading
	the shared libraries, even when this is done before libcw_do
	is turned on (except when LIBCWD_NO_STARTUP_MSGS is defined).

	Miscellaneous:
	- The configuration option --disable-libcwd-location is fixed.
	- Automake-1.5 now works.
	- Autoconf-2.5x now works.
	- FreeBSD works (again).

	API changes:

	IMPORTANT: 'channel_ct const' -> 'channel_ct'.
	Debug channels should no longer be declared constant.
	[ "libcw::debug::channel_ct const my_channel("FOO");" -->
	  "libcw::debug::selector_ct my_channel("FOO");" ]

	`long memblks()' has been renamed to `unsigned long mem_blocks()'.
	[ "memblks()" --> "mem_blocks()" ]

	The margin and marker are no longer using std::string, which is
	a bit slow.  Access to the margin and marker is now granted through
	debug_ct::margin() and debug_ct::marker().  The returned objects
	provide the following methods: size(), c_str() (this just returns
	an internal pointer, the termination zero is already there),
	reserve(), capacity(), append(), prepend() and assign() - all with
	their meanings borrowed from std::string.  For example, when
	capacity() returns a value larger or equal to the length of a string
	that would result from a call to append(), then calling append is
	garanteed not to invalidate the pointer returned by c_str().  The
	default capacity can be set with `reserve'.  append/prepend/assign
	accept both a std::string reference or a char*/size_t pair.
	Finally, the following methods are added to debug_ct:
	`push_margin()', `pop_margin()', `push_marker()' and `pop_marker()'.
	These functions can be used to quickly store and restore the
	respective formatting strings.
	[ "Debug( libcw_do.set_margin(std::string(buf, len)) );" -->
	  "Debug( libcw_do.margin().assign(buf, len) );" ]


	A debug function for internal use (by the maintainers):
	`debugdebugcheckpoint()' has been removed.  If you need a user
	function to be called every Dout() then define your own Dout
	macro's, that makes more sense then recompiling libcwd.

	CWASSERT was renamed to LIBCWD_ASSERT; Note that all macros that start
	with LIBCWD_ should NOT be used by the user, they are for internal use
	by libcwd.
	[ "CWASSERT( i == 1 );" --> "assert( i == 1);" ]

	debug_ct::get_os() has been removed.  Use cwprint or cwprint_using.
	Reason: the temporary stringstream that was returned was only valid
	inside a Dout to begin with.  The use of get_os() was dangerous.

	You will need to add
	#ifndef _GNU_SOURCE
        #define _GNU_SOURCE
        #endif
	to your "sys.h" file, prior to including any other header file,
	just before including <libcw/sysd.h>.  This is needed because libcwd
	uses GNU extensions.  Of course, it is not necessary to define
	_GNU_SOURCE when CWDEBUG isn't defined, so you may put it inside the
        #ifdef CWDEBUG ... #endif.
	If you don't understand this, read documentation/html/preparation.html.

	Bug fixes:

	When using .stabs, each first line of code after a source file scope change
	as a result of an inlined function resulted in a location lookup failure
	("No line number").

	The default std::allocator implementation uses static pointers to keep
	a private free list, allocating memory with malloc() in large chunks.
	The sharing of this memory pool with all STL containers, including
	std::string and std::stringstreams - and even the buffers of std::cout
	and std::cerr - caused `internal' allocations being mixed with `userspace'
	allocations and thus an incorrect error detection.
	Libcwd now uses its own allocators, with their own memory pool, for
	variables that need internal allocations.

libcwd-0.99.15

	libcwd now works with (single threaded) qt applications.  A few major
	bugs have been fixed.

	API changes:

	You now MUST use CWDEBUG, defining DEBUG will no longer work; it was
	incompatible with qt-2.2.4.

	The macro ASSERT, which is equivalent with assert when CWDEBUG is
	defined and empty when not, was renamed to CWASSERT.  The main reason
	for this is that qt already defines a macro called ASSERT.

	Bug fixes:

	A bug in the demangler for gcc-2.96 and earlier caused core dumps for
	symbols that started with _X... Since those are used a lot in X libs,
	libcwd was unusable with X windowing system applications (like those
	using qt).

	Wrong demangling or a core dump could occur during the demangling of
	symbols used in type_info_of<> when using g++ version 3.x.

	An abort on an 'assert(func_addr)' could happen for .stabs N_FUN entries.
	The latest glibc caused this - making libcwd unusable.

	Due to a bug in the installation of g++-3.0.x, the use of -I- caused
	the header file gthr-default.h not to be found and as such failure of
	compilation of libcwd with an out-of-the-box installation of gcc.

libcwd-0.99.14

	Bug fixes:

	On systems where a 'char' is unsigned, the line number lookup of DWARF
	failed.

	Systems with old binutils produce incorrect .stabs entries, causing
	the line number lookup of stabs to fail.  Libcwd now detects this and
	then aborts.

libcwd-0.99.13

	Support for dlopen() was added.  Because there seems to be no hook for
	dlopen, it's being defined as a macro (#define dlopen __libcwd_dlopen).
	However, if a dlopen isn't catched (for instance, because it is called
	from another library that is not using libcwd) and when <link.h> is
	available (as is on all OS that use glibc) then libcwd will
	automatically post-load any shared libraries as soon as it can not find
	the address of a location_ct.  Actually, the correct usage of the macro
	is only important in order to assure the correct unloading of symbols
	when a loaded module is dlclose-ed again (which is also defined as a
	macro).

	Improvement of the determination of the start of an object file.
	Unknown starts are now also correctly determined for very small shared
	objects.

	Support for the DWARF 2.0 debugging format has been added.

	Bug fix: previously local symbols were all thrown away, including
	static functions.  Now a source file / line number lookup inside a
	static function will work too.

	API changes:

	IMPORTANT: sys.h -> sysd.h.
	The header file sys.h has been renamed to sysd.h and was majorly
	cleaned up.  All macros that are not used in header files of libcwd
	have been removed.  Removed are: __restrict, NEED_SYS_TYPES,
	NEED_WORD_ALIGNMENT, NBLOCK_*, HAVE_RECURSIVE_BUILTIN_RETURN_ADDRESS,
	HAVE_FRAME_ADDRESS_OFFSET, CW_FRAME_ADDRESS_OFFSET, NO_ATTRIBUTE,
	NEED_FAKE_RETURN, UNUSED, USE, and __GXX_ABI_VERSION.  No header file
	is included anymore (it was possible that <sys/types.h>, <_G_config.h>
	and/or <streambuf.h> were included) and no typedefs are included
	anymore (removed: socklen_t, optval_t, retsig_t, sighandler_param_t
	and getgroups_t).  The constant malloc_overhead_c has also been
	removed from sys.h.
	YOU SHOULD HAVE been using #include "sys.h", containing:
	  #ifdef CWDEBUG
	  #include <libcw/sys.h>
	  #endif
	in effect causing the need to edit only one file (your "sys.h") and
	change <libcw/sys.h> into <libcw/sysd.h>.

	Debug channel WARNING is now on by default.  This means that you can't
	turn it on at the start of main: remove lines with
	Debug( dc::warning.on() ).

libcwd-0.99.12

	Bug fix release.

libcwd-0.99.11

	I changed my mind and renamed 'dc::stabs' back to 'dc::bfd'.  The label
	also is again "BFD".

libcwd-0.99.10

	MAJOR CHANGE: malloc, calloc, realloc and free are no longer macros but
	are now declared as external "C" functions.  This means that *all*
	allocations done by an application are now being caught, including
	those done from libc, libstdc++ and any other library that might be
	linked.

	IMPORTANT: The way nodebug.h was generated in the example-project was
	wrong.  If you used the example-project for your own project, then
	please look at the changes in maintMakefile.in and macrotest.cc.
	Alternatively you can use the nodebug.h file that is part of this
	distribution.

	Libcwd does not use libbfd anymore (and thus also not libiberty).  The
	symbol table is now read by libcwd itself as is the source file and
	line number lookup.  The configure option --disable-libcwd-bfd was
	therefore renamed to --disable-libcwd-location.  Added was the
	configure option --enable-libcwd-bfd in order to allow you to still
	use libbfd.

	The management of CWDEBUG has been made a bit clearer:  is not possible
	anymore to #include <libcw/debug.h> without defining CWDEBUG.  This to
	avoid confusion.

	For gurus only: Note that now it *is* possible to include
	<libcw/debugmalloc.h> directly, but only when CWDEBUG is *not* defined.
	In that case you will need to include a special "nodebug.h" that leaves
	the memory allocation support intact.  For this stripped down
	functionality of libcwd a bug was fixed: set_alloc_checking_off() and
	set_alloc_checking_on() are now still functional in that case.  In case
	non-gurus are reading this: Those two functions are not documented on
	purpose, just forget you ever saw this paragraph.

	API changes:

	::libcw_bfd_builtin_return_address_offset was renamed to
	libcw::debug::builtin_return_address_offset.

	The debug channel dc::bfd was renamed to dc::stabs and uses "STABS"
	as label now.

	Two methods have been added to class libcw::debug::debug_ct:
	`inc_indent' and `dec_indent' to increment and decrement the
	indentation respectively.

	The following only applies when __libc_malloc could not be found.
	Instead of using this you should really upgrade your libc.  If you use
	linux this most likely is not of concern to you.

	[ strdup(3) and wcsdup(3) are now treated like malloc(2), which means
	  that they are macros.  The default AllocTag used is "strdup()" and
	  "wcsdup()" respectively, but one can easily override that.  For
	  example:
	    char* s = strdup("\e[31mHello\tWorld!\e[0m");
	    AllocTag_dynamic_description(a, "strdup: \""
	        << libcw::debug::buf2str(a, strlen(a)) << '"');
	  will print 'strdup: "\e[31mHello\tWorld!\e[0m"' as description.

	  Added a new macro: RegisterExternalAlloc(ptr).
	  This macro calls libcw::debug::register_external_allocation(ptr)
	  unless --disable-libcwd-alloc was used during configure; then the
	  macro is empty.  This function allows one to register an external
	  allocation so it can now can be reallocated or freed by the
	  application (as well as externally).  Magic numbers are not added
	  because that would need a realloc (and thus a pointer change) and
	  it would break the case where the external library would occasionally
	  free the allocation again. ]

libcwd-0.99.9

	template<typename T> type_info_of<T>(void) was changed so that it no
	longer ignores any top-level qualifiers (in example,
	type_info_of<A const&>()); when using g++ 3.0.  Note that 0.99.8 still
	ignored those (including a `const') despite the release notes saying
	it didn't.

	The signature of template<typename T> type_info_of<T>(T) has been changed into
	template<typename T> type_info_of<T const&> in order to allow it to be used for
	abstract objects and/or objects with protected constructors.  This also avoids
	that a copy constructor for type T is called.  This version of type_info_of
	*does* ignore the top-level qualifiers (just like typeid() does).

	demangle_type(char const* in, std::string& out) now can be passed a string `in' that
	is not zero terminated.  This allows to demangle types in the middle of a mangled
	name without first copying the type (which is often impossible because you don't know
	what the type is in the first place).

	A new demangler was added for g++-3.0 and higher (the new ABI).  This took me weeks
	and weeks of hard work!

	class channel_ct has a new method: initialize(char const* label).  This allows one
	to pre-initialize a debug channel in the emergency case that it is needed before
	the constructor of this global object is called.  All global objects that libcwd
	declares are initialized this way when either `libcw_do' is constructed, or at the
	first call to new/malloc.

libcwd-0.99.8

	This version now also compiles and works with g++ 2.95.3 and
	3.0 20010523 (prerelease).  Demangling of variables and types with
	g++ 3.0 is still not implemented however.

	As a result of how libstdc++-v3 works, I've been forced to make all
	allocations done inside Dout() `internal'.  This has as disadvantage
	that memory allocations that are allocated inside Dout (in the user
	program; for example: Dout(dc::foo, malloc(1)))  but never freed
	will leak memory unnoticed.  Freeing this memory later, outside Dout(),
	currently leads to the rather confusing error:

	  COREDUMP: Trying to delete[] a pointer (0x80525d8) that appears to be internally
	  allocated!  This might be a bug in libcwd.  The magic number diagnostic gives: You
	  are 'delete[]'-ing a pointer (0x80525d8) that was allocated with 'new[]' internally
	  by libcwd.  This might be a bug in libcwd.

	template<typename T> type_info_of<T>(void) was changed so that it no
	longer ignores a top-level `const' (in example,
	type_info_of<A const>()); except on g++ version 2.96 (RedHat) which
	has a bug that causes this `const' still to be ignored.

	Several bugs were fixed that caused libcwd not to compile when the
	more exotic configure options, like --disable-*, were used.

libcwd-0.99.7

	This version compiles with g++ 3.0 20010224 (prerelease).  That is of
	little use however because it still doesn't work with libstdc++ version 3
	(some serious rewriting seems to be needed for that :().  Also note
	that this version is (still) not Thread-Safe.

	Removed the compile option "-fno-exceptions" as default,
	the library now also compiles without it.

	Removed libcw/h.h.  The library now does not include namespace std
	anymore by default and was patched to also compile in that case (this
	worked anyway already but is needed for g++-3.0).

	API changes:

	Support for the macro Dout_vform has been removed because
	ostream::vform isn't conforming the standard and is gone in
	libstdc++ version 3.

	libcw::debug::find was renamed to libcw::debug::find_channel.

	Bug fixes:

	g++-2.95.x core dumped in lockable_auto_ptr.h.  This is the reason
	for the release of 0.99.7.

	Improvements in acinclude.m4: some tests where done with the C++
	compiler and failed when using a compiler in a non standard place.
	Other tests failed because they use exit() without a proper proto-
	type.

	Fix in the testsuite so it also works when using a compiler that is
	installed in a non-standard place.  You still need to add the path to
	libstdc++-3.so to your LD_LIBRARY_PATH however!

libcwd-0.99.6

	A little gadget was added to namespace libcw::debug `cwprint_using'.
	This template function can be used to print objects to a debug
	stream using a method like `void print_on(ostream&) const'.
	Example usage: Dout(dc::notice, "object is: " <<
            cwprint_using(object, &Object::method) << '.');
        which then calls `void object.method(ostream&) const' to print data
	to the debug ostream.  When variations to this trick are needed
	then you can obviously add those to your local debug.h file.

	It is now allowed to use -DCWDEBUG instead of -DDEBUG while compiling
	files.  This allows to use the macro DEBUG for something else.  The
	use of -DDEBUG is deprecated, please switch to CWDEBUG.

	API changes:

	Major namespace changes:
	Almost everything was moved to namespace libcw::debug.
	This means that you probably will need to add a
	`using namespace libcw::debug;' to your local debug.h file.
	Note that namespace libcw::debug is automatically included in Debug()
	and Dout() et al; however due to a bug in the compiler this sometimes
	doesn't work and you still have to explicitely give a namespace.
	The following functions are still in global namespace when DEBUGMALLOC
	is defined:
	  __libcwd_malloc(unsigned int)
	  __libcwd_calloc(unsigned int, unsigned int)
	  __libcwd_realloc(void*, unsigned int)
	  __libcwd_free(void*)
	  template<typename T> T* __libcwd_allocCatcher<T>
	and it still redefines operators new and delete of course.
	The following templates are defined in namespace libcw:
	lockable_auto_ptr<>, manip1_tct<>, manip2_tct<>, imanip_id_tct<>,
	get_imanip_data<>, get_omanip_data<> and omanip_id_tct<>.
	These are defined in the header files libcw/lockable_auto_ptr.h and
	libcw/iomanip.h (they are actually part of libcw but also included
	with libcwd because libcwd uses them internally).
	[ Use "using namespace libcw::debug;" ]
	[ "lockable_auto_ptr"        --> "libcw::lockable_auto_ptr" ]

	The bfd interface has been redesigned:
	- The global structure `location_st' has been removed and is replaced
	  by a class `location_ct' (in namespace `libcw::debug', see above).
	- The function `libcw_bfd_pc_function_name' has been renamed to
	  `libcw::debug::pc_mangled_function_name'.
        - The function `libcw_bfd_pc_location' has been completely removed.
	  Instead you should use the constructor location_ct(void const* addr).
	If you used any of this then you will need to recompile your programs.
	There is no danger to make errors: things are garanteed to not compile
	until you fixed them except for the following changes in functionality
	of the function name pointer as returned by location_ct::function():
	- The function name pointer as returned by
	  location_ct::mangled_function_name() is now the same as what is
	  returned by pc_mangled_function_name (This makes it unnecessary
	  to call pc_mangled_function_name after pc_location failed, in the
	  hope that that will work).
	- It is now possible to check if the function that is returned is known
	  by comparing the returned function name pointer with
	  `libcw::debug::unknown_function_c' (instead of needing a strcmp()).
	- `pc_mangled_function_name' also returns
	  `libcw::debug::unknown_function_c' on failure and not NULL as did
	  `libcw_bfd_pc_function_name'.
	[ "location_st" --> "libcw::debug::location_ct"               ]
	[ "libcw_bfd_pc_function_name(addr)" -->
	               "libcw::debug::pc_mangled_function_name(addr)"
	               (and doesn't return NULL anymore)              ]
	[ "location_st location; libcw_bfd_pc_location(location, addr);" -->
	  "libcw::debug::location_ct location(addr);"                 ]
	[ Available interface of location_ct: see libcw/bfd.h         ]

	A few functions have been renamed now they were moved inside the
	libcw::debug namespace:
	The class debugmalloc_marker_ct was renamed to just marker_ct.
	The function libcw_debug_move_outside was renamed to move_outside.
	The function debug_mem_size was renamed to mem_size;
	The function debug_memblks was renamed to memblks;
	[ "debugmalloc_marker_ct"    --> "libcw::debug::marker_ct"    ]
	[ "libcw_debug_move_outside" --> "libcw::debug::move_outside" ]
	[ "debug_mem_size"           --> "libcw::debug::mem_size"     ]
	[ "debug_memblks"            --> "libcw::debug::memblks"      ]

	The macro ASSERT(x) no longer contains a ';', this might mean that you
	need to add semi-colons yourself if you have been using it.
	[ "ASSERT( i == 1 )"         --> "ASSERT( i == 1 );"          ]

	Bug fixes:

	Fixed demangling `const' member functions aka:
	  void Foo::foo(void) const;

	There was 'static initialisation order fiasco' bug that appeared
	mainly on solaris (linux always first initializes the shared
	libraries and only then constructs global objects of the application).
	The bug occured in most cases when a memory allocation was done in the
	constructor of a global object while the global objects of libcwd were
	not initialized yet.  The main problem was that a debub object
	(libcw_do) was NOT turned off before initialisation.  This fix allows
	the use of malloc/new (of course), Dout and DoutFatal before libcwd
	is initialized.  Other libcwd functions can cause a core dump when
	used in constructors of global objects.

libcwd-0.99.5

	The prototype of libcw_bfd_pc_location was changed from
	location_st libcw_bfd_pc_location(void const* addr) into
	void libcw_bfd_pc_location(location_st& result, void const* addr).

	Support for openBSD was finished: it is now possible to
	compile a static library.  Unfortunately, it is still not
	possible to compile a shared library on this OS.

	Writing "DoutFatal(error_cf, ..." is no longer allowed, it now
	is required to explicitely add the debug channel and write
	"DoutFatal(dc::fatal|error_cf, ...".

	Added support for libtool-1.3c and higher (cvs developer version).

	Bug fixes:

	Fixed a problem related to reentrance of bfd_find_nearest_line
	(of libbfd) under certain circumstances, causing a copy of
	uninitialized memory.

	Removed a few compile warnings for g++-2.96.

	The order of debug channels in a `ForAllDebugChannels' is no
	longer dependant of the order of initialisation of the global
	debug channel objects (they are now alphabetically ordered on
	label).

	Fixed the generation of nodebug.h in the example project to remove
	the replacement-lists too after turning #defines into #undef.

	Now using the namespace of std::type_info in libcw/type_info.h.

	Lots of bug fixes and additions in the demangler.

libcwd-0.99.4

	A real testsuite was added, based on dejagnu.

	We depend more on libtool now to handle linking with shared or
	static libraries.  As a result you can (again) on linux, link
	with just -lcwd (without having to specify also -lbfd -liberty).

	Bug fixes:

	A locked lockable_auto_ptr would still transfer ownership
	when using the assignment operator.  IMPORTANT: API change:
	now a locked lockable_auto_ptr does NOT transfer ownership
	when using the assignment operator (as was documented).

	Libcwd got into an endless loop when a fatal error occured
	before the fatal debug channels where initialized.  This
	happened for instance when a hard limit for the core size
	is set.

	When a hard limit for the core size is set, the call to
	setrlimit failed and libcwd terminated with a fatal
	error (and got into a loop, see above).  Now it sets the
	core size to the maximum value and prints a warning when
	that isn't unlimited.

libcwd-0.99.3

	A different bug work around for the compiler bug that surfaces
	in iomanip.h has been used.  It turned out that not only
	gcc-2.95.2 but even snap shot 2.96-20000724 has problems with
	the (ISO C++ correct) construct that was used.  The new
	work around works better and is not any longer dependend on the
	value of CXXFLAGS.

	Support for solaris has been added.  Tests were done on a 
	sparc-sun-solaris2.7.

	Configuration and installation has been improved on FreeBSD,
	it should now compile 'out of the box' with the usual
	"./configure; make; make install".
	
	It is not necessary to use GNU make any longer when using the
	tar ball distribution (GNU make is still needed if you use
	cvs or --enable-maintainer-mode).

libcwd-0.99.2

	Configuration is now automated, using autoconf.  This removes
	the need to install the prototype package.

	The Internal Compiler Error in debugmalloc.cc has been isolated
	and a workaround has been added.  Whether or not the workaround
	is needed is detected by ./configure (but be warned: it depends
	on the CXXFLAGS you use, this bug only occurs when using -ggdb).

	A new function `Debug( check_configuration() )' was added.  Use
	it to assure that the configuration of the linked library matches
	the configuration of the header files used.

	demangle.cc was completely rewritten.  It now exports two functions:
	`demangle_type' and `demangle_symbol', the latter is a replacement
	for the `cplus_demangle' from libiberty.  This allows to link with
	the shared version of libiberty (needed by libbfd) which was needed
	on FreeBSD.  This also gets rid of any direct dependence of libcwd
	on libiberty, which wasn't good because libiberty is not compiled
	with -fPIC.

libcwd-0.99.1

	Support for FreeBSD (4.0)
	Improved bfd.cc a little (lookup of symbols and source:line info)
	Minor bug fixes

libcwd-0.99.0

	First public release
