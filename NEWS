libcwd-0.99.6

	A little gadget was added to namespace libcw:debug: `print_using'.
	This template function can be used to print objects to a debug
	stream using a `void print_on(ostream&) const' method.
	Example usage: Dout(dc::notice, "object is: " <<
            libcw:debug::print_using(object, &Object::method) << '.');
        which then calls `void object.method(ostream&) const' to print data
	to the debug ostream.  When variations to this trick are needed
	then you can obviously add those to your local debug.h file.

	API changes:

	The macro ASSERT(x) no longer contains a ';', this might mean that you
	need to add semi-colons yourself if you have been using it.
	[ "ASSERT( i == 1 )" --> "ASSERT( i == 1 );" ].

	The bfd interface has been redesigned:
	- The global structure `location_st' has been removed and is replaced
	  by a class `location_ct' in namespace `libcw::debug'.
	- The function `libcw_bfd_pc_function_name' has been renamed to
	  `libcw::debug::pc_function_name'.
        - The function `libcw_bfd_pc_location' has been completely removed.
	  Instead you should use the constructor location_ct(void const* addr).
	If you used any of this then you will need to recompile your programs.
	There is no danger to make errors: things are garanteed to not compile
	until you fixed them except for the following changes in functionality
	of the function name pointer as returned by location_ct::function():
	- The function name pointer as returned by location_ct::function() is
	  now the same as what is returned by pc_function_name.  This makes it
	  unnecessary to call pc_function_name after pc_location failed, in the
	  hope that that will work.
	- It is now possible to check if the function that is returned is known
	  by comparing the returned function name pointer with
	  `libcw::debug::unknown_function_c' (instead of needing a strcmp()).
	  Note that `pc_function_name' still returns NULL on failure.
	[ "location_st" --> "libcw::debug::location_ct" ]
	[ "libcw_bfd_pc_function_name(addr)" -->
	  "libcw::debug::pc_function_name(addr)" ]
	[ "location_st location; libcw_bfd_pc_location(location, addr);" -->
	  "libcw::debug::location_ct location(addr);" ]
	[ Available interface of location_ct: see libcw/bfd.h ]

	Bug fixes:

	None

libcwd-0.99.5

	The prototype of libcw_bfd_pc_location was changed from
	location_st libcw_bfd_pc_location(void const* addr) into
	void libcw_bfd_pc_location(location_st& result, void const* addr).

	Support for openBSD was finished: it is now possible to
	compile a static library.  Unfortunately, it is still not
	possible to compile a shared library on this OS.

	Writing "DoutFatal(error_cf, ..." is no longer allowed, it now
	is required to explicitely add the debug channel and write
	"DoutFatal(dc::fatal|error_cf, ...".

	Added support for libtool-1.3c and higher (cvs developer version).

	Bug fixes:

	Fixed a problem related to reentrance of bfd_find_nearest_line
	(of libbfd) under certain circumstances, causing a copy of
	uninitialized memory.

	Removed a few compile warnings for g++-2.96.

	The order of debug channels in a `ForAllDebugChannels' is no
	longer dependant of the order of initialisation of the global
	debug channel objects (they are now alphabetically ordered on
	label).

	Fixed the generation of nodebug.h in the example project to remove
	the replacement-lists too after turning #defines into #undef.

	Now using the namespace of std::type_info in libcw/type_info.h.

	Lots of bug fixes and additions in the demangler.

libcwd-0.99.4

	A real testsuite was added, based on dejagnu.

	We depend more on libtool now to handle linking with shared or
	static libraries.  As a result you can (again) on linux, link
	with just -lcwd (without having to specify also -lbfd -liberty).

	Bug fixes:

	A locked lockable_auto_ptr would still transfer ownership
	when using the assignment operator.  IMPORTANT: API change:
	now a locked lockable_auto_ptr does NOT transfer ownership
	when using the assignment operator (as was documented).

	Libcwd got into an endless loop when a fatal error occured
	before the fatal debug channels where initialized.  This
	happened for instance when a hard limit for the core size
	is set.

	When a hard limit for the core size is set, the call to
	setrlimit failed and libcwd terminated with a fatal
	error (and got into a loop, see above).  Now it sets the
	core size to the maximum value and prints a warning when
	that isn't unlimited.

libcwd-0.99.3

	A different bug work around for the compiler bug that surfaces
	in iomanip.h has been used.  It turned out that not only
	gcc-2.95.2 but even snap shot 2.96-20000724 has problems with
	the (ISO C++ correct) construct that was used.  The new
	work around works better and is not any longer dependend on the
	value of CXXFLAGS.

	Support for solaris has been added.  Tests were done on a 
	sparc-sun-solaris2.7.

	Configuration and installation has been improved on FreeBSD,
	it should now compile 'out of the box' with the usual
	"./configure; make; make install".
	
	It is not necessary to use GNU make any longer when using the
	tar ball distribution (GNU make is still needed if you use
	cvs or --enable-maintainer-mode).

libcwd-0.99.2

	Configuration is now automated, using autoconf.  This removes
	the need to install the prototype package.

	The Internal Compiler Error in debugmalloc.cc has been isolated
	and a workaround has been added.  Whether or not the workaround
	is needed is detected by ./configure (but be warned: it depends
	on the CXXFLAGS you use, this bug only occurs when using -ggdb).

	A new function `Debug( check_configuration() )' was added.  Use
	it to assure that the configuration of the linked library matches
	the configuration of the header files used.

	demangle.cc was completely rewritten.  It now exports two functions:
	`demangle_type' and `demangle_symbol', the latter is a replacement
	for the `cplus_demangle' from libiberty.  This allows to link with
	the shared version of libiberty (needed by libbfd) which was needed
	on FreeBSD.  This also gets rid of any direct dependence of libcwd
	on libiberty, which wasn't good because libiberty is not compiled
	with -fPIC.

libcwd-0.99.1

	Support for FreeBSD (4.0)
	Improved bfd.cc a little (lookup of symbols and source:line info)
	Minor bug fixes

libcwd-0.99.0

	First public release
