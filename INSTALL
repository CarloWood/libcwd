Quick start
-----------

./configure --prefix=/usr
make
make install

If that doesn't work, mail me: libcw@alinoe.com
(include as much details as possible).

Hackers info
------------

-=i=-

`configure' has a few interesting options.  You can list them by issuing:

./configure --help

There is no reason to use libcwd's feature options (--disable-libcwd-alloc,
--disable-libcwd-magic, --disable-libcwd-marker and --disable-libcwd-bfd).
Actually, I forgot why they are there :).  You can read more about what
they do in Chapter 4 "Debugging compile options" here:
http://libcw.sourceforge.net/templates/index.html?debugging
If you want to change Makefile.am files and the-like then you'll need to
use --enable-maintainer-mode.

-=ii=-

The configure script looks for a GNU C++ compiler version 2.95.1 or higher.
If it can't find one (it will only find one when there is a g++ or c++ in
your PATH), then you can specify the right path during configuration.
For example, I configure libcwd as follows to compile with the latest CVS
version of g++, which I installed in /usr/local/bin/g++-cvs (and
/usr/local/bin is in my PATH):

CXX="g++-cvs -D_G_CLOG_CONFLICT=0 -D_G_HAS_LABS=1" ./configure

If libiberty.a or libbfd.so are in an unusual directory, then you
will have to set LDFLAGS prior to running ./configure:

LDFLAGS=-L/usr/local/lib CPPFLAGS=-I/usr/local/include ./configure

IMPORTANT: If you change CXX or LDFLAGS etc., remove config.cache before
running ./configure again: A lot of tests depend on the compiler and
flags that are being used!  For example, if you forgot to add the
LDFLAGS=... the first time and configure failed to find libiberty,
then you need to remove config.cache before running ./configure again.

-=iii=-

You can install libcwd in a `staging' directory by issuing

make DESTDIR=/tmp/staging install

this can come in handy when you want to build an rpm for instance.

-=iv=-

The Makefile has the following targets:

make [all-recursive]
make install
make uninstall
make clean
make distclean

If you feel brave you might even want to try

make dist
make maintainer-clean

well, ... heh.  Look in the Makefile for more targets ;)

-=v=-

Finally, you can also build libcwd in a different directory than the source
tree is in:

tar xzf libcwd-0.99.2.tar.gz
mkdir libcwd-objdir
cd libcwd-objdir
../libcwd-0.99.2/configure --prefix=/usr
make
su
make install

that way your source tree stays completely distclean :)
