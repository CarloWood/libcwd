Quick start
===========

./configure --prefix=/usr
make
make install

If that doesn't work, mail me: libcw@alinoe.com
(include as many details as possible).


Needed tools
============

Check if you have all GNU tools/libraries/packages that libcwd depends on:

     Primary site:
     ftp://ftp.gnu.org/gnu/

     List of mirrors:
     http://www.gnu.org/order/ftp.html

     Packages/versions needed
     ------------------------

     i) The GNU compiler, version 2.95.1 or higher.

     Location: gnu/gcc/
     Current version: 3.0

     Alternatively you can install only
     ia) gnu/gcc/gcc-core-<version>.tar.gz	and
     ib) gnu/gcc/gcc-g++-<version>.tar.gz
     
     Note: It is very unlikely that you want to install
     the source tree of gcc/g++.  Please try to upgrade your
     compiler the usual way if needed.
     If you are using rpm's then you will need to
     install/upgrade the following:
       gcc (2.95.1 or higher),
       gcc-c++ (of same version),
       libstdc++ (of same version) and
       cpp (of same version).
     Check your installation on RedHat with:
       rpm -qa | egrep '(gcc|libstdc|cpp)'

     Note: If you don't use rpm's but are using tar balls,
     then you do NOT need to download gnu/libstdc++/* because
     gcc-2.95 and higher comes with libstdc++ included.
     The gnu/libstdc++/ directory on GNU ftp sites are
     for older compilers or to be used as source drop-in
     when you compile g++ (replacing the normal stdc++ with
     an alpha version).  You also don't need libg++.
     Don't delete those libraries if you have them though
     since existing binaries might need to link with them.

  libcwd-0.99.10 was tested with gcc-2.95.x, gcc-2.96 (RedHat) and gcc-3.0.

     Packages needed to run the testsuite
     ------------------------------------

     If you want to run the testsuite then you will have to install
     dejagnu-1.4.1 which can be downloaded from ftp://ftp.gnu.org/gnu/dejagnu/,
     or your local GNU mirror.  However, this version still contains a bug
     and you'll have to apply the following patch: edit /usr/share/dejagnu/target.exp
     line 275 and remove the newline at the end (so that the word "text" on line
     276 is added at the end of line 275:
     regsub -all ".*: warning: -f(pic|PIC) ignored for target .*" $text "" text

     Alternatively, you can get dejagnu directly from the cvs repository
     at http://www.gnu.org/software/dejagnu/ where this bug already has been
     fixed (as it will be in any version *after* 1.4.1).

     Packages/versions needed as maintainer or when using CVS
     --------------------------------------------------------

     If you want to generate maintainer files (and you need that when
     you get this package via CVS) then you also need to have the
     following tools:

     iii)  GNU make
     iv)   GNU m4
     v)    GNU which
     vi)   autoconf
     vii)  automake
     viii) libtool

     Each of those can be downloaded from your local GNU site.

Hackers info
============

-=i=-

`configure' has a few interesting options.  You can list them by issuing:

./configure --help

There is no reason to use libcwd's feature options (--disable-libcwd-alloc,
--disable-libcwd-magic, --disable-libcwd-marker and --disable-libcwd-location).
Actually, I forgot why they are there :).  You can read more about what
they do in Chapter 4 "Debugging compile options" here:
http://libcw.sourceforge.net/templates/index.html?debugging
If you want to change Makefile.am files and the-like then you'll need to
use --enable-maintainer-mode.  If you enable maintainer-mode then you
will need GNU make, other make won't work (you also need a lot of other
extra tools installed on your system).

-=ii=-

The configure script looks for a GNU C++ compiler version 2.95.1 or higher.
If it can't find one (it will only find one when there is a g++ or c++ in
your PATH), then you can specify the right path during configuration.
For example, I configure libcwd as follows to compile with the latest CVS
version of g++, which I installed in /usr/local/bin/g++-cvs (and
/usr/local/bin is in my PATH):

CC="gcc-cvs" CXX="g++-cvs" ./configure

-=iii=-

If you don't have an ELF32 system and therefore need to link with libbfd, then you
can configure using --enable-libcwd-bfd.  If libiberty.a or libbfd.so are in an
unusual directory, then you will have to set LDFLAGS prior to running ./configure:

LDFLAGS="-L/usr/gnu/lib" CPPFLAGS="-I/usr/gnu/include" ./configure

Please note that the libbfd that comes with binutils-2.11.x is not compatible
with the libiberty that comes with with gcc-2.95.x.

-=iii=-

You can install libcwd in a `staging' directory by issuing

make DESTDIR=/tmp/staging install

this can come in handy when you want to build an rpm for instance.

-=iv=-

The Makefile has the following targets:

make [all-recursive]
make install
make uninstall
make clean
make distclean

If you feel brave you might even want to try

make dist
make maintainer-clean

well, ... heh.  Look in the Makefile for more targets ;)

-=v=-

Finally, you can also build libcwd in a different directory than the source
tree is in:

tar xzf libcwd-0.99.10.tar.gz
mkdir libcwd-objdir
cd libcwd-objdir
../libcwd-0.99.10/configure --prefix=/usr
make
su
make install

that way your source tree stays completely distclean :)
