// @configure_input@
// $Header$
//
// Copyright (C) 2000, by
// 
// Carlo Wood, Run on IRC <carlo@alinoe.com>
// RSA-1024 0x624ACAD5 1997-01-26                    Sign & Encrypt
// Fingerprint16 = 32 EC A7 B6 AC DB 65 A6  F6 F6 55 DD 1C DC FF 61
//
// This file may be distributed under the terms of the Q Public License
// version 1.0 as appearing in the file LICENSE.QPL included in the
// packaging of this file.
//

//
// NOTE:
//
// This header file was generated with the `configure' script of libcwd-@VERSION@
// If you change your system header files (like glibc or kernel header)
// it might be needed to regenerate it.
//

#ifndef LIBCW_SYS_H
#define LIBCW_SYS_H

#@CW_CONFIG_NEED_SYS_TYPES@ NEED_SYS_TYPES
#ifdef NEED_SYS_TYPES
#include <sys/types.h>
#endif

//
// typedefs
//
// socklen_t		: The type of the fifth argument of `setsockopt'
// optval_t		: The type of the fourth argument of `getsockopt'
// retsig_t		: The return type of a signal handler
// sighandler_param_t	: The type of the parameter of a signal handler
// getgroups_t		: The type of the array argument to getgroups
//
@CW_TYPEDEFS@

//
// malloc overhead
//

unsigned int const malloc_overhead_c = @CW_MALLOC_OVERHEAD_C@;

//
// Need word alignment or not
//

#@CW_CONFIG_NEED_WORD_ALIGNMENT@ NEED_WORD_ALIGNMENT

//
// Define blocking method
//
// NBLOCK_POSIX: posix non-blocking sockets
// NBLOCK_BSD  : bsd   non-blocking sockets
// NBLOCK_SYSV : sysv  non-blocking sockets
//

#define NBLOCK_@CW_CONFIG_NBLOCK@

//
// Offset to __builtin_return_address() needed to get
// the correct line number from bfd_find_nearest_line().
// Usage:
// libcw_bfd_pc_location(result, (char*)__builtin_return_address(0) + libcw_bfd_builtin_return_address_offset)
// writes the location of the previous function call to `result'.
//

int const libcw_bfd_builtin_return_address_offset = @CW_CONFIG_BUILTIN_RETURN_ADDRESS_OFFSET@;

//
// __builtin_return_address(x) with x > 0 does or doesn't work.
//

#@CW_CONFIG_RECURSIVE_BUILTIN_RETURN_ADDRESS@ HAVE_RECURSIVE_BUILTIN_RETURN_ADDRESS

//
// Define CW_FRAME_ADDRESS_OFFSET to be the offset to the next
// frame pointer in the frame structure.
//

#@CW_CONFIG_FRAME_ADDRESS_OFFSET@ HAVE_FRAME_ADDRESS_OFFSET
#ifdef HAVE_FRAME_ADDRESS_OFFSET
#define CW_FRAME_ADDRESS_OFFSET @CW_FRAME_ADDRESS_OFFSET_C@
#endif

// Bug work arounds

// Including certain header files fail with a warning.  For example:
// /usr/include/bits/resource.h:109: warning: `RLIM_INFINITY' redefined
// Word around (if any):
@CW_REDEFINES_FIX@

// This is to avoid warnings like:
// /usr/include/g++-3/iostream.h:253:5: "_G_CLOG_CONFLICT" is not defined
#@CW_CONFIG_G_CONFIG_H_MACROS@ NEED_G_CONFIG_H_MACROS
#ifdef NEED_G_CONFIG_H_MACROS
#include <_G_config.h>
#ifndef _G_CLOG_CONFLICT
#define _G_CLOG_CONFLICT 0
#endif
#ifndef _G_HAS_LABS
#define _G_HAS_LABS @CW_HAVE_LABS@
#endif
#endif

// This package needs GNU gcc-2.95 or higher, period.
// However, I'll leave this in for now.

#ifdef NO_ATTRIBUTE
  #define __attribute__(x)
  #define NEED_FAKE_RETURN(x) return x;
#else
  #define NEED_FAKE_RETURN(x)
#endif

// General macros that are used in all files.

#define RCSTAG_CC(string) static char const* const rcs_ident __attribute__ ((__unused__)) = string;
#define RCSTAG_H(name, string) static char const* const rcs_ident_##name##_h __attribute__ ((__unused__)) = string;
#define RCSTAG_INL(name, string) static char const* const rcs_ident##name##_inl __attribute__ ((__unused__)) = string;

#define UNUSED(x)
#define USE(var) static void* use_##var = (use_##var = (void*)&use_##var, (void*)&var)

// Include an ident for this header file

RCSTAG_H(sys, "$Id$")

#endif /* LIBCW_SYS_H */
